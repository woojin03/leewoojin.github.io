

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://woojin03.github.io//</id>
  <title>woojin</title>
  <subtitle>디지털 포렌식과 모의해킹을 중심으로, 보안 분야의 다양한 경험을 차곡차곡 쌓아가는 블로그입니다.</subtitle>
  <updated>2025-05-09T12:11:11+09:00</updated>
  <author>
    <name>woojin</name>
    <uri>https://woojin03.github.io//</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="https://woojin03.github.io//feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="ko-KR"
    href="https://woojin03.github.io//"/>
  <generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator>
  <rights> © 2025 woojin </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>Penetration Test Study 6(1)</title>
    <link href="https://woojin03.github.io//posts/Penetration-Test-Study-6(1)/" rel="alternate" type="text/html" title="Penetration Test Study 6(1)" />
    <published>2025-05-09T00:00:00+09:00</published>
  
    <updated>2025-05-09T00:00:00+09:00</updated>
  
    <id>https://woojin03.github.io//posts/Penetration-Test-Study-6(1)/</id>
    <content type="text/html" src="https://woojin03.github.io//posts/Penetration-Test-Study-6(1)/" />
    <author>
      <name>woojin</name>
    </author>

  
    
  

  <summary>해당 문제는 게시판의 search 파라미터에서 SQL Injection을 통해 숨겨진 데이터(flag) 를 추출하는 문제였습니다.  사전에 PortSwigger Labs에서 SQLi를 학습했기 때문에 쉽게 접근할 수 있을 줄 알았는데, 생각보다 고전했습니다.    🧪 시도 과정 및 풀이  🎯 시도 1 – SQL Injection이 가능한가? normaltic&amp;#39; OR &amp;#39;1&amp;#39;=&amp;#39;1--    ✅ SQL 인젝션 성공 확인    🎯 시도 2 – 컬럼 수 확인 normaltic&amp;#39; ORDER BY 1 --    ✅ 성공   normaltic&amp;#39; ORDER BY 5 --    ❌ 실패  ✅ 컬럼 수는 4개로 추정됨  🎯 시도 3 – 출력 컬럼 식별 normaltic&amp;#39; UNION SELECT 1,2,3,4 --   ✅ ...</summary>

  </entry>

  
  <entry>
    <title>LLaMA3 기반 디지털포렌식 아티팩트 분석기 개발 (1)</title>
    <link href="https://woojin03.github.io//posts/llama3_digital_forensics(1)/" rel="alternate" type="text/html" title="LLaMA3 기반 디지털포렌식 아티팩트 분석기 개발 (1)" />
    <published>2025-05-07T00:00:00+09:00</published>
  
    <updated>2025-05-07T00:00:00+09:00</updated>
  
    <id>https://woojin03.github.io//posts/llama3_digital_forensics(1)/</id>
    <content type="text/html" src="https://woojin03.github.io//posts/llama3_digital_forensics(1)/" />
    <author>
      <name>leewoojin</name>
    </author>

  
    
    <category term="Forensics" />
    
    <category term="LLaMA3" />
    
  

  <summary>1. 파일 다운로드  개인 컴퓨터 사양에 맞는 파일을 아래 사이트에서 다운로드합니다.  🔗 https://ollama.com/download    2. 다운로드한 파일 실행  설치 파일을 실행하면 아래와 같은 화면이 순서대로 나타납니다.                                        3. LLaMA3 모델 실행  설치가 완료되면, 터미널에서 아래 명령어를 복사하여 붙여넣고 실행합니다: ollama run llama3     llama3.2와 같은 최신 버전 사용을 권장하지만, 저는 추후 Google Colab과 연동할 계획이 있어 기본 llama3 모델을 설치해 사용했습니다.</summary>

  </entry>

  
  <entry>
    <title>모의해킹 스터디 5주차 CTF 문제 분석 및 구현</title>
    <link href="https://woojin03.github.io//posts/Penetration-Test-Study-5(2)/" rel="alternate" type="text/html" title="모의해킹 스터디 5주차 CTF 문제 분석 및 구현" />
    <published>2025-05-06T00:00:00+09:00</published>
  
    <updated>2025-05-06T00:00:00+09:00</updated>
  
    <id>https://woojin03.github.io//posts/Penetration-Test-Study-5(2)/</id>
    <content type="text/html" src="https://woojin03.github.io//posts/Penetration-Test-Study-5(2)/" />
    <author>
      <name>leewoojin</name>
    </author>

  
    
    <category term="Pentest" />
    
    <category term="W5" />
    
  

  <summary>⚠️ 본 실습 콘텐츠는 노말틱님의 해킹 스터디 CTF 문제를 기반으로 재구성하였으며, 학습 및 교육 목적에 한해 사용됩니다.   이번 글에서는 해당 문제를 분석하고, 동일한 취약점을 활용한 CTF 문제를 직접 구현해 봄으로써, SQL Injection이 로그인 로직에 어떻게 적용되고 동작하는지를 내부 구조 수준에서 심층적으로 이해하고자 합니다.  이 글은 총 3일에 걸쳐 작업한 내용을 기반으로 정리되었습니다.  📥 문제 다운로드 안내 문제 실행 및 설치 방법은 아래 GitHub 저장소의 README.md 파일에 정리되어 있습니다:  👉 https://github.com/woojin03/normaltic-penstudy/tree/ctf  메인 페이지  1~3주차 학습 내용을 기반으로, ChatGPT와 함...</summary>

  </entry>

  
  <entry>
    <title>모의해킹 스터디 5주차 CTF 문제 풀기</title>
    <link href="https://woojin03.github.io//posts/Penetration-Test-Study-5(1)/" rel="alternate" type="text/html" title="모의해킹 스터디 5주차 CTF 문제 풀기" />
    <published>2025-05-03T00:00:00+09:00</published>
  
    <updated>2025-05-03T00:00:00+09:00</updated>
  
    <id>https://woojin03.github.io//posts/Penetration-Test-Study-5(1)/</id>
    <content type="text/html" src="https://woojin03.github.io//posts/Penetration-Test-Study-5(1)/" />
    <author>
      <name>leewoojin</name>
    </author>

  
    
    <category term="Pentest" />
    
    <category term="W5" />
    
  

  <summary>과제 1. 오늘 배운거 복습 하기 (로그인 우회, 세션 탈취 등) 2. 인증 우회 실습 문제 풀기 (라이트업) + 문제와 비슷한 환경 구성해보기    CTF Login Bypass 1  해당 페이지에 들어가 보면 일반 로그인 화면과 유사하게 생긴 것을 확인할 수 있습니다. 강의와 같이 다음과 같은 인젝션을 사용하여 로그인 우회가 가능했습니다      Login Bypass 2     왜 or은 실패했는데 #은 성공했는가?     🔎 SQL 쿼리 구조에 따른 차이  ✅ doldol&amp;#39; or &amp;#39;1&amp;#39;=&amp;#39;1 이 성공하는 경우  # 인증 / 식별이 분리해서 처리하는 쿼리 $sql = &amp;quot;SELECT * FROM users WHERE username = &amp;#39;$id&amp;#39;&amp;quot;;      이 구조에서는 사용자 존재 여부만 확인하...</summary>

  </entry>

  
  <entry>
    <title>모의해킹 스터디 5주차 SQLi 학습</title>
    <link href="https://woojin03.github.io//posts/Penetration-Test-Study-5(3)/" rel="alternate" type="text/html" title="모의해킹 스터디 5주차 SQLi 학습" />
    <published>2025-04-30T00:00:00+09:00</published>
  
    <updated>2025-04-30T00:00:00+09:00</updated>
  
    <id>https://woojin03.github.io//posts/Penetration-Test-Study-5(3)/</id>
    <content type="text/html" src="https://woojin03.github.io//posts/Penetration-Test-Study-5(3)/" />
    <author>
      <name>leewoojin</name>
    </author>

  
    
    <category term="Pentest" />
    
    <category term="W4" />
    
  

  <summary>이 포스팅은 PortSwigger Web Security Academy의 SQL Injection 학습 경로를 기반으로 작성되었습니다.   SQL 인젝션(SQLi)이란?     SQL 인젝션은 웹 보안 취약점으로, 공격자가 데이터베이스 쿼리를 방해하여 사용자 데이터를 접근하거나 수정할 수 있는 방법입니다.   공격자는 SQL 쿼리를 조작하여 모든 제품을 표시하거나 비밀번호 검사를 우회하여 다른 계정에 로그인할 수 있습니다.   SQL 인젝션 취약점을 탐지하기 위해 데이터베이스 정보를 수집하고, 블라인드 SQL 인젝션과 같은 복잡한 접근 방법이 필요합니다.   이를 예방하기 위해서는 매개변수화된 쿼리를 사용하여 사용자 입력이 쿼리 구조에 영향을 미치지 않도록 해야 합니다.   SQL 주입 취약점은 어떻게...</summary>

  </entry>

</feed>


